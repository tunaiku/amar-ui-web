@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function em($size) {
  $size: strip-unit($size / 16);
  @return #{$size}em;
}

@function rem($size) {
  $size: strip-unit($size / 16);
  @return #{$size}rem;
}

@mixin create-properties($properties) {
  @each $property-name, $property-value in $properties {
    #{$property-name}: $property-value;
  }

  @content;
}

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function str-ucfirst($string) {
  @return capitalize($string);
}

@function uncapitalize($string) {
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function str-ucwords($string) {
  $progress: $string;
  $result: '';

  $running: true;

  @while $running {
    $index: str-index($progress, ' ');
    @if $index {
      $result: $result + capitalize(str-slice($progress, 1, $index));
      $progress: str-slice($progress, ($index + 1));
    } @else {
      $running: false;
    }
  }

  @return capitalize($result) + capitalize($progress);
}

@function contain($list, $value) {
  @return not not index($list, $value);
}

@function camelize($string) {
  $progress: $string;
  $result: '';
  $exclude: ' ', '-', '–', '—', '_', ',', ';', ':', '.';

  @while str-length($progress) > 0 {
    $char: str-slice($progress, 1, 1);

    @if contain($exclude, $char) {
      $progress: capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
    } @else {
      $result: $result + $char;
      $progress: str-slice($progress, 2);
    }
  }

  @return $result;
}
