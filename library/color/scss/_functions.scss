/// Utility functions to generate different shades of the given color.
///
/// @param {Number} $color
/// @param {String} $percentage
///
@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}

/// Returns the color value of the given color theme.
///
/// @param {String} $color-theme
/// @example amb-color-theme("primary")
///
@function amb-color-theme($color-theme, $shade-level: 50) {
  @if not map-has-key($amb-color-theme-map, $color-theme) {
    @error "The theme '#{$color-theme}' is not found in '$amb-color-theme-map' variable map!";
  }

  $color-hex: map-get($amb-color-theme-map, $color-theme);
  @return amb-color-shade($color-hex, $shade-level);
}

/// Returns the color value of the requested color accent.
///
/// @param {String} $color-accent
/// @example amb-color-accent("lightblue")
///
@function amb-color-accent($color-accent, $shade-level: 50) {
  @if not map-has-key($amb-color-accent-map, $color-accent) {
    @error "The accent '#{$color-accent}' is not found in '$amb-color-accent-map' variable map!";
  }

  $color-hex: map-get($amb-color-accent-map, $color-accent);
  @return amb-color-shade($color-hex, $shade-level);
}

/// Returns the hex value from the requested neutral level. Defaults to 50.
///
/// @param {String} $color-accent
/// @example amb-color-accent("lightblue")
///
@function amb-neutral($neutral-level: 50) {
  $temp-neutral-level: $neutral-level !default;

  @if type_of($neutral-level) == 'string' {
    $temp-neutral-level: unquote($neutral-level);
  }

  @if not map-has-key($amb-neutral-map, $temp-neutral-level) {
    @error "The level #{$temp-neutral-level} is not found in '$amb-neutral-map' variable map!";
  }

  @return map-get($amb-neutral-map, $temp-neutral-level);
}

/// Returns another shade of the requested color value.
/// Default $shade-level is 50 which is the original color value.
///
/// @param {Number} $color-value
/// @example amb-color-shade(#abc123, 50)
///
@function amb-color-shade($color-value, $shade-level: 50) {
  // returns the absolute value of $shade-level and round it to the nearest multiplication of 10.
  @if $shade-level > 100 or $shade-level < 0 {
    @error "$shade-level value cannot exceed 100 or less than 0!";
  }

  @if $shade-level > 50 {
    $shade-percentage: ($shade-level - 50) * 2%;
    @return shade($color-value, $shade-percentage);
  } @else {
    $shade-percentage: (50 - $shade-level) * 2%;
    @return tint($color-value, $shade-percentage);
  }
}

/// The shorthand version of amb-color-theme and amb-color-shade functions.
///
/// Gets the color value from the given color theme (e.g "primary") and returns a different shade variant
/// of the color value using the tinter shader function of the specified shade level.
///
/// Color theme should be available in $amb-color-theme-map variable map, otherwise it will return an error.
///
/// e.g: amb-color-theme("primary", 50)
///
/// @param {String} $color-theme
/// @param {Number} $shade-level
///
@function amb-color-theme-shade($color-theme, $shade-level: 50) {
  $color-value: amb-color-theme($color-theme);

  @return amb-color-shade($color-value, $shade-level);
}

/// A shorthand function to get a specific opacity level of the selected color theme.
/// Return the rgba value instead of hex value.
///
/// @param {String} $color-theme
/// @param {Number} $opacity-level
/// @example amb-color-theme-opacity("primary", 0.9)
///
@function amb-color-theme-opacity($color-theme, $opacity-level: 1) {
  $color-value: amb-color-theme($color-theme);
  @return rgba($color-value, $opacity-level);
}

/// A shorthand function to get a specific opacity level of the selected neutral level.
/// Return the rgba value instead of hex value.
///
/// @param {String} $color-theme
/// @param {Number} $opacity-level
/// @example amb-neutral-opacity("primary", 0.9)
///
@function amb-neutral-opacity($neutral-level, $opacity-level: 1) {
  $hex-value: amb-neutral($neutral-level);

  @return rgba($hex-value, $opacity-level);
}

/// Returns an accessible contrasting color against the given color value.
///
/// @param {Number} $color
/// @todo This function has the literal computations as Bootstrap's. Create our own custom
/// function to determine color contrast of the given $color value.
///
@function amb-color-contrast($color) {
  $color-contrast-threshold: 200;
  $color-contrast-dark-text: $black;
  $color-contrast-light-text: $white;

  $red: red($color);
  $green: green($color);
  $blue: blue($color);

  $yiq: (($red * 299) + ($green * 587) + ($blue * 114)) / 1000;

  @return if($yiq >= $color-contrast-threshold, $black, $white);
}

@function amb-color-theme-contrast($color-theme) {
  @if not map-has-key($amb-color-theme-map, $color-theme) {
    @error "The theme '#{$color-theme}' is not found in '$amb-color-theme-map' variable map!";
  }

  $color-value: amb-color-theme($color-theme);
  @return amb-color-contrast($color-value);
}
