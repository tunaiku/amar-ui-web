/// Utility functions to generate different shades of the given color.
///
/// @param {Number} $color
/// @param {String} $percentage
///
@function tint($color, $percentage) {
  @return mix($white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix($black, $color, $percentage);
}

/// Returns the color value of the given color theme.
///
/// @param {String} $color-theme
/// @example amb-color-theme("primary")
///
@function amb-color-theme($color-theme, $shade-level: 50) {
  @if not map-has-key($amb-color-theme-map, $color-theme) {
    @error "The theme '#{$color-theme}' is not found in '$amb-color-theme-map'";
  }

  $color-hex: map-get($amb-color-theme-map, $color-theme);
  @return amb-color-shade($color-hex, $shade-level);
}

/// Returns color hex value of the passed color pallete. Additionally, you could
/// also pass a different shade of the color by passing `$shade-level` argument.
///
/// @param {String} $color-name
/// @param {Number} $shade-level | Default: 50
/// @example
///   color: amb-color-pallete('red', 50)
/// @example
///   background-color: amb-color-pallete('green', 50)
///
@function amb-color-pallete($color-name, $shade-level: 50) {
  @if not map-has-key($amb-color-pallete-map, $color-name) {
    @error "'#{$color-name}' is not found in '$amb-color-pallete-map'";
  }

  $color-hex: map-get($amb-color-pallete-map, $color-name);
  @return amb-color-shade($color-hex, $shade-level);
}

/// Returns a different shade of the given color value.
///
/// @param {Number} $color-value
/// @example amb-color-shade(#abc123, 50)
///
@function amb-color-shade($color-value, $shade-level: 50) {
  // returns the absolute value of $shade-level and round it to the nearest multiplication of 10.
  @if $shade-level > 100 or $shade-level < 0 {
    @error "$shade-level value cannot exceeds 100 or less than 0!";
  }

  @if $shade-level > 50 {
    $shade-percentage: ($shade-level - 50) * 2%;
    @return shade($color-value, $shade-percentage);
  } @else {
    $shade-percentage: (50 - $shade-level) * 2%;
    @return tint($color-value, $shade-percentage);
  }
}

/// The shorthand version of amb-color-theme and amb-color-shade functions.
///
/// Gets the color value from the given color theme (e.g primary) and returns a different shade variant
/// of the color value using the tinter shader function of the specified shade level.
///
/// Color theme should be available in $amb-color-theme-map variable map, otherwise it will return an error.
///
/// e.g: amb-color-theme("primary", 50)
///
/// @param {String} $color-theme
/// @param {Number} $shade-level
///
@function amb-color-theme-shade($color-theme, $shade-level: 50) {
  $color-value: amb-color-theme($color-theme);

  @return amb-color-shade($color-value, $shade-level);
}

/// A shorthand function to get a specific opacity level of the selected color theme.
/// This will also return an rgba value instead of raw hex value.
///
/// @param {String} $color-theme
/// @param {Number} $opacity-level
/// @example amb-color-theme-opacity("primary", 0.9)
///
@function amb-color-theme-opacity($color-theme, $opacity-level: 1) {
  $color-value: amb-color-theme($color-theme);
  @return rgba($color-value, $opacity-level);
}

/// Returns an accessible contrasting color against the given color value.
///
/// @param {Number} $color
/// @todo This function has the literal computations as Bootstrap's. Create our own custom
/// function to determine color contrast of the given $color value.
///
@function amb-color-contrast($color) {
  $color-contrast-threshold: 200;
  $color-contrast-dark-text: $black;
  $color-contrast-light-text: $white;

  $red: red($color);
  $green: green($color);
  $blue: blue($color);

  $yiq: (($red * 299) + ($green * 587) + ($blue * 114)) / 1000;

  @return if($yiq >= $color-contrast-threshold, $black, $white);
}

@function amb-color-theme-contrast($color-theme) {
  @if not map-has-key($amb-color-theme-map, $color-theme) {
    @error "The theme '#{$color-theme}' is not found in '$amb-color-theme-map' variable map!";
  }

  $color-value: amb-color-theme($color-theme);
  @return amb-color-contrast($color-value);
}
