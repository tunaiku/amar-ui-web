@import '@amar-ui-web/core/helpers';
@import './variables';

@mixin amb-create-text-color-classes() {
  .Color {
    @include amb-create-color-themes($color-type: 'text');
    @include amb-create-color-helpers($color-type: 'text');
  }
}

@mixin amb-create-bg-color-classes() {
  .BgColor,
  .BackgroundColor {
    @include amb-create-color-themes($color-type: 'background');
    @include amb-create-color-helpers($color-type: 'background');
  }
}

@mixin amb-create-color-themes($color-type) {
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  @each $color-theme, $color-theme-value in $amb-color-theme-map {
    $camelized-color-theme: camelize($color-theme);
    &-#{$camelized-color-theme} {
      @include amb-append-color-shade-variants($color-type, $color-theme);

      #{$color-type-property}: $color-theme-value !important;

      @if $color-type == 'background' {
        color: amb-color-contrast($color-theme-value);
      }
    }
  }
}

@mixin amb-append-color-shade-variants($color-type, $color-theme) {
  @if not $color-theme {
    @error 'You must pass $color-theme value to use this mixin!';
  } @else if not $color-type {
    @error 'You must pass $color-type value to use this mixin!';
  }

  $color-theme-value: amb-color-theme($color-theme);
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  @for $shade-index from 1 through 100 {
    @if $shade-index % 10 == 0 {
      $color-value: amb-color-shade($color-theme-value, $shade-index);

      &-#{$shade-index} {
        #{$color-type-property}: $color-value !important;

        @if $color-type == 'background' {
          color: amb-color-contrast($color-value);
        }
      }
    }
  }
}

@mixin amb-create-color-helpers($color-type) {
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  &-transparent {
    #{$color-type-property}: transparent !important;
  }
}
